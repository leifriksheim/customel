import{html,render as lighterRender}from"lighterhtml";export default function Component({tag:t="my-element",mode:e="closed",props:s={},state:i={},actions:r={},mounted:h=(()=>{}),propChanged:n=(()=>{}),render:o=(()=>{}),styles:p=(()=>"")}){class a extends HTMLElement{constructor(){super(),this.props=s,this.propTypes={},this._initProps=this._initProps.bind(this),this.propChanged=n.bind(this),this._initProps(),this.state=i,this.setState=this.setState.bind(this),this.styles=p.bind(this),this.actions=r,this._initActions=this._initActions.bind(this),this._initActions(),this.engine=html.bind(this),this.html=o.bind(this),this.render=lighterRender.bind(this,this.attachShadow({mode:e}),this.render),this.mounted=h.bind(this),this.emit=this.emit.bind(this)}_initProps(){Object.keys(this.props).map(t=>{const e=typeOf(this.props[t]);this.propTypes[t]=e;const s=this.getAttribute(t)||this.hasAttribute(t)||this.props[t];this.props[t]=typeCast(s,e,t)})}_initActions(){Object.keys(this.actions).map(t=>{this.actions[t]=r[t].bind(this)})}_upradeProperty(t){let e=this[t];delete this[t],this[t]=e}static get observedAttributes(){return Object.keys(s).forEach(t=>{Object.defineProperty(this.prototype,t,{configurable:!0,get(){return this.props[t]},set(e){const s=this.props[t];this.props[t]=e,"object"==typeof e?this.render():null===e?this.removeAttribute(t):this.setAttribute(t,e),this.propChanged(t,s,e)}})}),Object.keys(s)}connectedCallback(){Object.keys(this.props).forEach(t=>{this._upradeProperty(t,this.prototype)}),this.render(),this.mounted()}attributeChangedCallback(t,e,s){const i=this.propTypes[t],r=this.props[t],h=typeCast(s||this.hasAttribute(t),i,t);r!==h&&(this.props[t]=h,this.render(),this.propChanged(t,r,h))}render(){return this.engine`
        <style>
        ${this.styles()}
        </style>
        ${this.html(this.engine)}
      `}setState(t){this.state={...this.state,...t},this.render()}emit(t,e){this.dispatchEvent(new CustomEvent(t,{detail:e}))}}return customElements.define(t,a),a};function typeCast(t,e,s){typeOf(t);return"boolean"===e?"true"===t:"number"===e?parseInt(t):"string"===e?String(t):t}function typeOf(t){return Object.prototype.toString.call(t).slice(8,-1).toLowerCase()}